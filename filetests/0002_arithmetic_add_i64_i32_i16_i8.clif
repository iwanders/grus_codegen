test interpret
test run
target aarch64
target s390x
target x86_64
target riscv64 has_m
target riscv64 has_c has_zcb
target pulley32
target pulley32be
target pulley64
target pulley64be

; From 
; https://github.com/bytecodealliance/wasmtime/blob/a0338af84f66cb452fdf4b692d4facb5d052c12d/cranelift/filetests/filetests/runtests/arithmetic.clif

function %add_i64(i64, i64) -> i64 {
block0(v0: i64,v1: i64):
    v2 = iadd v0, v1
    return v2
}
; run: %add_i64(0, 0) == 0
; run: %add_i64(0, 1) == 1
; run: %add_i64(-1, 0) == -1
; run: %add_i64(-1, 1) == 0
; run: %add_i64(0x7FFFFFFF_FFFFFFFF, 0x7FFFFFFF_FFFFFFFF) == -2
; run: %add_i64(0x7FFFFFFF_FFFFFFFF, 0x80000000_00000000) == -1
; run: %add_i64(0x01234567_89ABCDEF, 0xFEDCBA98_76543210) == -1
; run: %add_i64(0xA00A00A0_0A00A00A, 0x0BB0BB0B_B0BB0BB0) == 0xABBABBAB_BABBABBA
; run: %add_i64(0xC0FFEEEE_C0FFEEEE, 0x1DCB1111_1DCB1111) == 0xDECAFFFF_DECAFFFF

function %add_i32(i32, i32) -> i32 {
block0(v0: i32,v1: i32):
    v2 = iadd v0, v1
    return v2
}
; run: %add_i32(0, 0) == 0
; run: %add_i32(0, 1) == 1
; run: %add_i32(-1, 0) == -1
; run: %add_i32(-1, 1) == 0
; run: %add_i32(0x7FFFFFFF, 0x7FFFFFFF) == -2
; run: %add_i32(0x7FFFFFFF, 0x80000000) == -1
; run: %add_i32(0x01234567, 0xFEDCBA98) == -1
; run: %add_i32(0xA00A00A0, 0x0BB0BB0B) == 0xABBABBAB
; run: %add_i32(0xC0FFEEEE, 0x1DCB1111) == 0xDECAFFFF


function %add_i16(i16, i16) -> i16 {
block0(v0: i16,v1: i16):
    v2 = iadd v0, v1
    return v2
}
; run: %add_i16(0, 0) == 0
; run: %add_i16(0, 1) == 1
; run: %add_i16(-1, 0) == -1
; run: %add_i16(-1, 1) == 0
; run: %add_i16(0x7FFF, 0x7FFF) == -2
; run: %add_i16(0x7FFF, 0x8000) == -1
; run: %add_i16(0x0123, 0xFEDC) == -1
; run: %add_i16(0xA00A, 0x0BB0) == 0xABBA
; run: %add_i16(0xC0FF, 0x1DCB) == 0xDECA

function %add_i8(i8, i8) -> i8 {
block0(v0: i8,v1: i8):
    v2 = iadd v0, v1
    return v2
}
; run: %add_i8(0, 0) == 0
; run: %add_i8(0, 1) == 1
; run: %add_i8(-1, 0) == -1
; run: %add_i8(-1, 1) == 0
; run: %add_i8(0x7F, 0x7F) == -2
; run: %add_i8(0x7F, 0x80) == -1
; run: %add_i8(0x01, 0xFE) == -1
; run: %add_i8(0xA0, 0x0B) == 0xAB
; run: %add_i8(0xC0, 0x1D) == 0xDD

;iadd_imm

function %iaddadd_i8(i8) -> i8 {
block0(v0: i8):
    v1 = iadd_imm v0, 8
    return v1
}
; run: %iaddadd_i8(0) == 8
; run: %iaddadd_i8(1) == 9
; run: %iaddadd_i8(10) == 18
